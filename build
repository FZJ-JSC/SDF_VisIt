#! /bin/sh

fmt="SDF"

fullversion=`visit -version 2>&1 | sed 's,.* \([0-9\.]*\),\1,'`
version=${fullversion%%\.*}
tmpdir=.builddir

clean=0
build_type=0
build_visit_reader=1
build_utilities=0
DBG=""
DEBUG=""
PRIVATE="-private"
VERBOSE=""
OPTS=""
err=0

while getopts crdpnuvh123 name
do
   case $name in
      c) clean=2 ; OPTS="$OPTS -c";;
      r) clean=1 ; OPTS="$OPTS -r";;
      d) DBG="-g -O0"; OPTS="$OPTS -d";
         DEBUG="-DCMAKE_BUILD_TYPE=Debug" ;;
      p) PRIVATE="-public"; OPTS="$OPTS -p" ;;
      n) build_visit_reader=0 ;;
      u) build_utilities=1 ;;
      v) VERBOSE="VERBOSE=1" ;;
      h) cat <<EOF
The VisIt build script attempts to automate the process of building the SDF
VisIt reader plugin on a variety of platforms. By default it will try three
approaches to building the plugin. First it tries the build environment
supplied by the VisIt installation. If this fails, it will attempt to build a
parallel version of the plugin using the mpi compiler in the current search
path. Finally, it will try just building the serial version of the plugin.

VisIt build script options:
  -c: Clean up files. Do not build anything.
  -r: Rebuild. Clean up files and then build.
  -d: Build with debugging flags enabled.
  -p: Do a "public" build. This passes the "-public" flag on to the VisIt build
      system which copies the binaries into a publically accessible location.
  -n: Don't build the VisIt reader plugin.
  -u: Do build the additional SDF utilities.
  -v: Build verbosely.
  -1: Perform only the default VisIt build.
  -2: Perform only a parallel VisIt build.
  -3: Perform only a serial VisIt build.
EOF
         exit ;;
      1) build_type=1 ;;
      2) build_type=2 ;;
      3) build_type=3 ;;
   esac
done

# Find directory containing the actual visit binary
cwd=`pwd`
cmd=`which visit`
if [ "$cmd"x = x ]; then
  echo ERROR: The command 'visit' was not found in your search PATH
  exit 1
fi

i=0
while [ $i -lt 100 ]; do
  visitpath=`dirname $cmd`
  cd "$visitpath"
  [ "$visitpath"x = "."x ] && visitpath=`pwd`
  cmd=`basename $cmd`
  cmd=`readlink $cmd`
  [ "$cmd"x = x ] && break
  i=$((i+1))
done
cd "$cwd"


export PATH="$visitpath:$PATH"
export CXXFLAGS="-Wno-deprecated $DBG"
export CFLAGS="$DBG"

# Auto-detect C++ compiler
cpp=$CXX
[ "$cpp"x = x ] && cpp=$(which c++)
[ "$cpp"x = x ] && cpp=$(which cpp)
[ "$cpp"x = x ] && cpp=$(which g++)
$cpp --version | grep -i clang > /dev/null 2>&1
if [ $? -eq 0 ]; then
  export CXXFLAGS="-stdlib=libstdc++ $CXXFLAGS"
fi

buildit () {
  err=0

  purge=0
  buildver="$build_type -- $fullversion"
  oldbuildver=""
  [ -r $tmpdir/buildver ] && oldbuildver=`cat $tmpdir/buildver`
  if [ "$oldbuildver"x != "$buildver"x ]; then
    purge=1
    rm -rf $tmpdir
    mkdir -p $tmpdir
    echo "$buildver" > $tmpdir/buildver
    rm -rf CMake* cmake* Makefile
  else
    echo "No need to purge"
  fi

  if [ "$version"x = x ]; then
    echo "Unable to build. Please add visit to your \$PATH"
    exit 1
  fi

  if [ $purge -ne 0 ]; then
    xml2info -clobber $PRIVATE ${fmt}${version}.xml

    if [ $version -eq 1 ]; then
      xml2makefile -clobber $PRIVATE ${fmt}${version}.xml
      if [ "`uname -m`"x = "x86_64x" ]; then
        sed "s,\(^CXXFLAGS.*\),\1 -m32 $DBG\\
CFLAGS=\$(CFLAGSORIG) -m32 $DBG\\
PY_CXXFLAGS=-I\$(TOPDIR)/include/python,;s,\(^LDFLAGS.*\),\1 -m32 $DBG," \
    Makefile > .Makefile.tmp
        \mv -f .Makefile.tmp Makefile
      fi
      if [ $build_type -eq 2 ]; then
        sed "s,\(^CXXFLAGS.*\),\1\\
CXX=mpic++\\
CC=mpicc," Makefile > .Makefile.tmp
        \mv -f .Makefile.tmp Makefile
      elif [ $build_type -eq 3 ]; then
        grep -v "^EPARDSO" Makefile > .Makefile.tmp
        \mv -f .Makefile.tmp Makefile
      fi
    else
      xml2cmake -clobber $PRIVATE ${fmt}${version}.xml
      for f in `grep -w INCLUDE CMakeLists.txt | cut -f2 -d\( | \
          cut -f1 -d\) | tr -d \"`; do
        base=`basename $f`
        sed 's,/[^;]*libmpi[^;]*;,,g; s,/[^;]*libopen-[^;]*;,,g;
             s,[^;]*}general;,,g' $f > $tmpdir/$base
        if [ $build_type -eq 2 ]; then
          grep -v 'CMAKE_CXX_COMPILER ' $tmpdir/$base | \
              grep -v 'CMAKE_C_COMPILER ' | \
              grep -v 'VISIT_PARALLEL_LIBS ' > $tmpdir/tmp
          mv $tmpdir/tmp $tmpdir/$base
        elif [ $build_type -eq 3 ]; then
          grep -v 'VISIT_PARALLEL ' $tmpdir/$base > $tmpdir/tmp
          mv $tmpdir/tmp $tmpdir/$base
        fi
        sed 's,\(INCLUDE(["]*\)'$f'\(["]*\),\1'$tmpdir/$base'\2,' \
            CMakeLists.txt > $tmpdir/tmp
        mv $tmpdir/tmp CMakeLists.txt
      done
    fi
    cmake $DEBUG .
    # FIXME: This is to workaround incorrect cmake output
    ofile=CMakeFiles/ESDFDatabase_par.dir/build.make
    if [ -e $ofile ]; then
      sed '/linux-x86_64\/lib\/librt\.so/ d;
           /linux-x86_64\/lib\/libpthread\.so/ d' $ofile > $tmpdir/tmp
      mv $tmpdir/tmp $ofile
    fi
  fi

  if [ $clean -ge 1 ] ; then make clean ; fi
  make $VERBOSE
}

build_default () {
  srl=""
  build_type=1
  buildit
  err=$?
}

build_parallel () {
  srl=""
  build_type=2
  # Execute in a subshell to stop CC being altered in the current shell.
  (export CC=mpicc
  export CXX=mpicxx
  buildit)
  err=$?
}

build_serial () {
  srl=" (Serial version only)."
  build_type=3
  buildit
  err=$?
}

get_old_build_type () {
  type=1
  [ -r $tmpdir/buildver ] && type=`cut -c1 $tmpdir/buildver`
  return $type
}

if [ $clean -ge 2 ]; then
  make clean > /dev/null 2>&1
  rm -rf CMake* cmake* Makefile ${fmt}*Info.C ${fmt}*Info.h $tmpdir
elif [ $build_visit_reader -eq 1 ]; then
  sh gen_commit_string.sh
  echo "#define SDF_READER_BUILD_DATE \"`date`\"" > build_date.h

  if [ $build_type -eq 1 ]; then
    build_default
  elif [ $build_type -eq 2 ]; then
    build_parallel
  elif [ $build_type -eq 3 ]; then
    build_serial
  else
    get_old_build_type
    tried=$?
    if [ $tried -eq 1 ]; then
      build_default
    elif [ $tried -eq 2 ]; then
      build_parallel
    elif [ $tried -eq 3 ]; then
      build_serial
    fi

    if [ $err -ne 0 -a $tried -ne 1 ]; then
      echo
      echo "Trying again with default"
      build_default
    fi
    if [ $err -ne 0 -a $tried -ne 2 ]; then
      echo
      echo "Trying again with mpicc"
      build_parallel
    fi
    if [ $err -ne 0 -a $tried -ne 3 ]; then
      echo
      echo "Trying again without parallel reader."
      build_serial
    fi
  fi

  if [ $err -ne 0 ]; then
    echo "ERROR: Failed to build VisIt reader."
    exit 1
  fi

  echo
  echo "VisIt ${fmt} reader successfully built.${srl}"
fi

#! /bin/sh

formats="SDF"
publicORprivate="-private"
public=0

while getopts pf: name ; do
   case $name in
      f) formats="$OPTARG" ;;
      p) public=1
         publicORprivate="-public" ;;
   esac
done

version=`visit -version 2>&1 | sed 's,.* \([0-9]*\).*,\1,'`
fullversion=$(visit -version 2>&1 | sed 's/.* \([0-9]*\.[0-9]*\.[0-9]*\)\./\1/')
tmpdir=.tmp

. build.cfg
debug=0

# Find directory containing the actual visit binary
cwd=`pwd`
cmd=`which visit`
i=0
while [ $i -lt 100 ]; do
  visitpath=`dirname $cmd`
  cd "$visitpath"
  [ "$visitpath"x = "."x ] && visitpath=`pwd`
  cmd=`basename $cmd`
  cmd=`readlink $cmd`
  [ "$cmd"x = x ] && break
  i=$((i+1))
done
cd "$cwd"

if [ $debug -ne 0 ]; then
  DBG=""
  CDBG=""
else
  DBG="-g -O0"
  CDBG="-DCMAKE_BUILD_TYPE=Debug"
fi

export PATH=$visitpath:$PATH
export CXXFLAGS="-Wno-deprecated $DBG"

buildit () {
  rm -rf $tmpdir
  mkdir -p $tmpdir
  if [ "$version"x != x ]; then
    for fmt in $formats; do
      xml2info -clobber $publicORprivate ${fmt}${version}.xml
      rm -f CMake* cmake* Makefile
  
      if [ $version -eq 1 ]; then
        xml2makefile -clobber $publicORprivate ${fmt}${version}.xml
        if [ "`uname -s`"x = "Darwinx" -a "`uname -m`"x = "x86_64x" ]; then
          sed "s,\(^CXXFLAGS.*\),\1 -m32 $DBG \
CFLAGS=$(CFLAGSORIG) -m32 $DBG \
PY_CXXFLAGS=-I$(TOPDIR)/include/python,;s,\(^LDFLAGS.*\),\1 -m32 $DBG," Makefile > .Makefile.tmp
          \mv -f .Makefile.tmp Makefile
        fi
      else
        xml2cmake -clobber $publicORprivate ${fmt}${version}.xml
        for f in `grep -w INCLUDE CMakeLists.txt | cut -f2 -d\"`; do
          base=`basename $f`
          sed 's,/usr/lib/libmpi[^;]*.dylib,,g;s,/usr/lib/libopen[^;]*.dylib,,g' $f > $tmpdir/$base
          sed 's,INCLUDE("'$f',INCLUDE("'$tmpdir/$base',' \
              CMakeLists.txt > $tmpdir/tmp
          mv $tmpdir/tmp CMakeLists.txt
        done
        cmake $CDBG .
      fi
  
      make clean
      make 2> $tmpdir/err
    done
  else
    echo "Unable to build. Please add visit to your \$PATH"
  fi
}


buildit

if [ $? -ne 0 ]; then
  mpi=0
  grep -w mpi.h $tmpdir/err > /dev/null && mpi=1
  grep -w lmpi $tmpdir/err > /dev/null && mpi=1
  grep -w MPI $tmpdir/err > /dev/null && mpi=1
  grep libmpi $tmpdir/err > /dev/null && mpi=1
  if [ $mpi -ne 0 ]; then
    echo "Trying again with mpicc"
    # Execute in a subshell to stop CC being altered in the current shell.
    (export CC=mpicc
    export CXX=mpicxx
    buildit)
  else
    cat $tmpdir/err
  fi
fi

for fmt in $formats; do
  if [ "$fmt"x = "SDF"x ]; then
    ./build_lib
    mkdir -p $visitpath/../$fullversion/fge_extensions
    [ $public = 1 ] && cp sdf_extension.so $visitpath/../$fullversion/fge_extensions
    gcc -DSDF_DEBUG_ALL $DBG -o sdf2ascii sdf2ascii.c sdf_control.c sdf_util.c \
        sdf_input.c sdf_input_cartesian.c sdf_input_point.c
    #python setup.py build -b pybuild install
  fi
done

rm -rf $tmpdir

#! /bin/sh

fmt="SDF"

version=`visit -version 2>&1 | sed 's,.* \([0-9]*\).*,\1,'`
tmpdir=.tmp

clean=0
DBG=""
DEBUG=""
PRIVATE="-private"
VERBOSE=""
OPTS="$*"

while getopts cdpv name
do
   echo $name $OPTIND $OPTARG
   case $name in
      c) clean=1 ;;
      d) DBG="-g -O0";
         DEBUG="-DCMAKE_BUILD_TYPE=Debug" ;;
      p) PRIVATE="-public" ;;
      v) VERBOSE="VERBOSE=1" ;;
   esac
done

# Find directory containing the actual visit binary
cwd=`pwd`
cmd=`which visit`
i=0
while [ $i -lt 100 ]; do
  visitpath=`dirname $cmd`
  cd "$visitpath"
  [ "$visitpath"x = "."x ] && visitpath=`pwd`
  cmd=`basename $cmd`
  cmd=`readlink $cmd`
  [ "$cmd"x = x ] && break
  i=$((i+1))
done
cd "$cwd"


export PATH=$visitpath:$PATH
export CXXFLAGS="-Wno-deprecated $DBG"

buildit () {
  rm -rf $tmpdir
  mkdir -p $tmpdir
  if [ "$version"x != x ]; then
    xml2info -clobber $PRIVATE ${fmt}${version}.xml
    rm -rf CMake* cmake* Makefile

    if [ $version -eq 1 ]; then
      xml2makefile -clobber $PRIVATE ${fmt}${version}.xml
      if [ "`uname -s`"x = "Darwinx" -a "`uname -m`"x = "x86_64x" ]; then
        sed "s,\(^CXXFLAGS.*\),\1 -m32 $DBG \
CFLAGS=$(CFLAGSORIG) -m32 $DBG \
PY_CXXFLAGS=-I$(TOPDIR)/include/python,;s,\(^LDFLAGS.*\),\1 -m32 $DBG," Makefile > .Makefile.tmp
        \mv -f .Makefile.tmp Makefile
      fi
    else
      xml2cmake -clobber $PRIVATE ${fmt}${version}.xml
      for f in `grep -w INCLUDE CMakeLists.txt | cut -f2 -d\"`; do
        base=`basename $f`
        sed 's,/usr/lib/libmpi[^;]*.dylib,,g;s,/usr/lib/libopen[^;]*.dylib,,g' $f > $tmpdir/$base
        sed 's,INCLUDE("'$f',INCLUDE("'$tmpdir/$base',' \
            CMakeLists.txt > $tmpdir/tmp
        mv $tmpdir/tmp CMakeLists.txt
      done
      cmake $DEBUG .
    fi

    make clean
    make 2> $tmpdir/err
  else
    echo "Unable to build. Please add visit to your \$PATH"
  fi
}


if [ $clean -eq 1 ]; then
  make clean > /dev/null 2>&1
  rm -rf CMake* cmake* Makefile SDF*Info.C SDF*Info.h
else
  buildit
  
  if [ $? -ne 0 ]; then
    mpi=0
    grep -w mpi.h $tmpdir/err > /dev/null && mpi=1
    grep -w lmpi $tmpdir/err > /dev/null && mpi=1
    grep -w MPI $tmpdir/err > /dev/null && mpi=1
    grep libmpi $tmpdir/err > /dev/null && mpi=1
    if [ $mpi -ne 0 ]; then
      echo "Trying again with mpicc"
      # Execute in a subshell to stop CC being altered in the current shell.
      (export CC=mpicc
      export CXX=mpicxx
      buildit)
    else
      cat $tmpdir/err
    fi
  fi
fi

[ -x ./extension/build ] && ./extension/build $OPTS
[ -x ./utilities/build ] && ./utilities/build $OPTS

rm -rf $tmpdir
